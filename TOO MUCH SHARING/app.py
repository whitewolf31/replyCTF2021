import math
import sympy

_1_50 = 1 << 50  # 2**50 == 1,125,899,906,842,624

def isqrt(x):
    """Return the integer part of the square root of x, even for very
    large integer values."""
    if x < 0:
        raise ValueError('square root not defined for negative numbers')
    if x < _1_50:
        return int(math.sqrt(x))  # use math's sqrt() for small parameters
    n = int(x)
    if n <= 1:
        return n  # handle sqrt(0)==0, sqrt(1)==1
    # Make a high initial estimate of the result (a little lower is slower!!!)
    r = 1 << ((n.bit_length() + 1) >> 1)
    while True:
        newr = (r + n // r) >> 1  # next estimate by Newton-Raphson
        if newr >= r:
            return r
        r = newr

n = 153714532490089638943440634302019370342638608386188440189192881959783074929820051906805863823269977439739733231721387770580587594320151476754629097982403461226289675323251915760027800804005182177165783713748324981002579198192281535526965247490607524643201527405171997320378953992645479404509890009940909631067
phi = 153714532490089638943440634302019370342638608386188440189192881959783074929820051906805863823269977439739733231721387770580587594320151476754629097982403436388791287276107415728051491146797733733411303766258638176554078971606079872243153617094791186111510668210382280965706717937271892055556008324676561808976
c = 55273261062570739681010264595985371041157840964648656831930400272737039051430695674550183993431603054374880300877866371203703300049061418870293778716525555247365050420028002442131265779903318995941773493556476607657153053218574982820087953280789103385312094407675291305458162527974571222555474239698408297655
s1 = n + 1 - phi
s2 = s1 * s1 - 4 * n
sqr = isqrt(s2)
p = (s1 + sqr) // 2
q = (s1 - sqr) // 2
e = int(str(p)[0:32])+int(str(q)[0:32])
while not sympy.isprime(e):
    e+=1
d = sympy.mod_inverse(e, phi)
print(pow(c, d, n))